Desafios com Onboarding em Grandes Projetos Open Source
Falando de Kubernetes
18 Apr 2018
Tags: kubernetes, open source

Ellen Körbes
e@ellenkorbes.com
@ellenkorbes

* Quem?

- Ellen Körbes
- Atualmente: Big Data Developer
- Dezembro/2017 a março/2018: Developer full-time no projeto Kubernetes

[kubernetes logo]

* Kube-oquê?

Wikipedia:

"Kubernetes is an open-source system for automating deployment, scaling and management of containerized applications...

It aims to provide a "platform for automating deployment, scaling, and operations of application containers across clusters of hosts". It works with a range of container tools, including Docker."

Tem:

- Uns 2 mil contribuidores.
- Umas 2 milhões de linhas de código.

* O problema: onboarding é difícil.

* O problema do onboarding...

Como é que uma pessoa sozinha faz pra entender como todo o projeto funciona e começar a fazer contribuições?

* O problema do onboarding...

- O problema do Kubernetes é que tem muito Kubernetes. Muita coisa, muito código, muitos docs, muito tudo.
- E o problema nesse tipo de projeto é que ou já tem um sistema pronto, ou alguem vai ter que investir tempo no onboarding do novo contribuidor.
- E tempo é um problema. Não pelo tempo em si, mas por uma questão de comprometimento.
- "É um projeto aberto. E se eu investir X horas nessa pessoa e semana que vem ela sumir?"

* A solução atual: funcionários de grandes empresas.

- Empresas interessadas alocam funcionários ao projeto.
- E.g. minha equipe no Kubernetes era toda do Google.
- Isso funciona pois: A menos que o funcionário se demita, ele não vai simplesmente sumir. E aí é fácil investir tempo em novos contribuidores, pois o retorno é garantido.
- Isso não ajuda nossa causa pois: Ele incentiva que não haja um processo de onboarding. O contribuidor pode ficar lá se ralando por quantos meses precisar, sem problemas.
- Já contribuidores comuns não vão investir meses do seu tempo livre até conseguir começar a contribuir.

* Outras soluções: Outreachy and GSoC.

- Outreachy: estágios pagos para pessoas de grupos tradicionalmente sub-representados na tecnologia.
- Google Summer of Code: estágios pagos para estudantes.
- O problema do comprometimento? Se não trabalhar, não ganha. Resolvido.

* Tá Ellen mas eu não trabalho pro Google e esses estágios não servem pra mim. E agora?

* Tamo tudo lascado então?

- Sim.
- A menos que se crie um processo onde contribuidores não precisem de ajuda para o onboarding inicial.
- Aí eles podem mostrar comprometimento primeiro, e receber mais recursos do projeto depois.
- "Mas Ellen não é assim que todo projeto open source funciona?"
- Sim.
- Mas em projetos do tamanho do Kubernetes, não é tão simples assim.

* Mas sério, é tão complicado assim?

Primeiro passo. No Kubernetes, pra contribuir você precisa:

- Assinar o CLA.
- Achar um SIG pra trabalhar.
- Fazer o set up do seu ambiente de desenvolvimento.

Não sabe o que é um CLA ou um SIG? 

Tá em um daqueles 70 docs no repositório community. Procura lá.

Boa sorte.

* Mas sério, é tão complicado assim?

Sean Sullivan, contribuidor do SIG-CLI, funcionário do Google:

"Most projects have just one system. Say a team of 20 people, one system, complexity isn’t too bad. But Kubernetes is a distributed system, and the amount of things you need to know…"

"The pool of knowledge is far deeper than at any of the other projects I have worked until now. You can spend years becoming an expert on this area, or that area… but then there are tons of other areas, and it’s all changing rapidly. It feels overwhelming."

"There are structures to organize this complexity, [...] It’s only now that they’re creating the kind of infrastructure to organize all of these separate groups across all of Kubernetes. There are, what, almost 40 SIGs now? And they all have different coding styles, different codebases."

* Minha experiência, parte 1.

* Primeiros dias → terror.

- Kubernetes foi meu primeiro projeto de verdade.
- "Como fazer isso? Dá uma olhada aqui." Eram 200 mil linhas de código.
- Dias e dias e dias perdida. Natal e ano novo foram estresse total.
- "Será que isso é pra mim? Será que meu emprego anterior me aceita de volta?"

* Tá. Que que a gente faz então?

- Trabalha.
- A comunidade do projeto tem que tornar esse onboarding mais fácil, mais claro, mais acessível.
- O objetivo é que novos contribuidores possam pegar o jeito e começar a contribuir sem precisar de muita ajuda.

* Possíveis soluções: as fáceis.

* Maneiras "molezinha" de tornar seu projeto mais accessível.

- Comece pelo arquivo CONTRIBUTING.md.

- Encorage a comunicação. Quem são os membros que podem ajudar? Como faz pra falar com eles? IRC, Slack, e-mail? E qual a atmosfera? Será que um contribuidor novo não vai se intimidar de ir falar com um developer de renome?

- Tenha um código de conduta. Não é só pra enfeite.

- Fique de olho na atitude da sua comunidade. Se a resposta ao fechar um issue for "Finalmente!" ao invés de "Massa! Brigadão!" seu projeto vai perder contribuidores. 

- Mantenha seu issues tracker organizado e use labels como "beginner friendly," "help wanted," e "good first PR."

* Sobre o issues tracker...

- Quando você encontrar bugs não-críticos e fáceis de arrumar, não arrume. Ponha a label "beginner friendly" e deixe para um newbie resolver. Assim a pessoa participa e ganhar experiência sem passar muito trabalho.

E quando fizer isso, aproveite pra dar uma força:

- Recomende que docs a pessoa deve ler pra se familiarizar com o assunto.

- Indique que arquivos devem ser modificados para resolver o issue.

- Algumas dicas sobre como resolver não vão atrapalhar também.

- Por fim, deixe claro para quem pedir ajuda, caso necessário.

* Um parênteses sobre tracker labels.

Quando você colocar um label indicando que um issue é bom para iniciantes:

1. Tenha certeza de que ele realmente é.

2. Deixe claro *para*quais*iniciantes* este é um bom issue.

- Seu iniciante é um senior developer que é novo no projeto?
- É alguem que acabou de se formar?
- É alguem que nunca programou na vida?

Pro esquema self-service funcionar, isso tem que estar claro.

* Possíveis soluções: as difíceis.

* As soluções fáceis não são o suficiente...

...não em projetos dessa escala.

E as soluções difíceis não são difíceis por serem complicadas. Elas são simples. O difícil é por na prática.

* Tenha boa documentação.

- Sua documentação deve ter um ponto inicial. *Um* ponto inicial. 
- E também um guia de quick start. 
- E um roadmap. 
- E... um monte de coisa.

Mas o mais importante: Mantenha um balanço entre dar informação demais, e dar informação de menos.

Ambos são ruins.

* Tenha boa documentação. Mas como?

- É necessário um grupo na sua comunidade ativamente trabalhando na documentação.
- Mantendo-a relevante, atualizada, e num padrão de qualidade.
- Sua documentação deve ser organizada usando princípios de story-telling: Primeiro o contribuidor lê isso. Depois aquilo. Depois aquilo lá. Deve haver uma ordem lógica, uma progressão.

Tacar um monte de arquivos numa pasta não é documentação. Principalmente se eles forem escritos por pessoas diferentes, com jargão diferente, em anos diferentes e se contradizendo.

* Tenha bons comentários no código.

Em Go, temos o godoc. Ele gera documentação a partir dos comentários no código.

E sabe uma coisa legal que estão fazendo no Kubernetes?

Numa PR, antes de ver o código, a gente abre o godoc. Se a documentação não fizer sentido por si só, a PR volta pra review. Sem nem olhar pro código.

Bom código não é auto-explicativo. Boas explicações são.

* Ensine "as manha" pros novatos.

Meu sonho no Kubernetes:

Que algum developer experiente fizesse um screen capture do seu dia, narrando o que está fazendo.

* Crie um programa de mentoring.

Isso é complicado pois:

- Temos o problema do comprometimento que mencionamos anteriormente.

- Cada um tem uma idéia diferente sobre como mentoring deve ser.

- Ser um bom mentor é uma habilidade que deve ser aprendida. Poucos nascem sabendo.

Idéias:

- Sessões de pair-programming.

- Code reviews.

- Conversas não-estruturadas, para tirar dúvidas.

* Crie um programa de mentoring.

Mentoring é lindo.

Mas é uma coisa individual. E aí temos um problema de escala.

Por isso que o ideal é...

* Crie um programa de mentoring coletivo/em grupo.

O que é? É mentoring individual, com audiência.

Idéias:

- Sessões de pair-programming... num hangout aberto.

- Code reviews... no YouTube.

- Conversas não-estruturadas... onde um monte de gente participa.

Vantagens:

- A questão de comprometimento individual desaparece. Aqui se cria resources para uma comunidade, não para um indivíduo.

- Há mais feedback para todas as partes envolvidas, fazendo com que o processo se aprimore mais rapidamente.

- O foco pode estar nas necessidades da comunidade, não de indivíduo isolado, mas sem perder a característica um-a-um que torna o mentoring tão mais eficiente que tutoriais e artigos, por exemplo.

* Minha experiência, parte 2.

* O momento da virada.

- Aprendi que é difícil pra todo mundo. O problema não era eu.
- O momento "Me ajuda, caramba!"
- "Mas me ajuda assim, assim, e assado."
- "Precisamos de meetings. One-on-ones. Code reviews."

* Consertando: comunidade.

* Documentação

O contributor's guide do Kubernetes costumava ser... aqueles 70 docs jogados numa pasta.

Cada um escrevia um pedaço do jeito que queria.

No começo isso era bom, pois assim a própria comunidade podia decidir o que documentar. Mas o projeto cresceu, e virou zona.

Nos últimos meses uma galera foi atrás de consertar essa situação e criar um guia claro e conciso.

Tá lindo.

* Mentoring

- Há um programa de mentoring coletivo dando seus primeiros passos.

- São grupos de umas 10 pessoas estudando certos assuntos específico. A idéia é que estes grupos subam um degrau na hierarquia do Kubernetes. (Membros viram reviewers, reviewers viram approvers, por aí vai.)

- E falando de mentoring, como já mencionado, o Kubernetes participa de programas como Outreachy e Google Summer of Code.

* Meet Our Contributors

- Existe um esquema chamado Office Hours, onde membros do Kubernetes respondem dúvidas dos usuários em um live stream.

- Agora também tem Meet Our Contributors. A mesma coisa, mas para contribuidores.

- A descrição oficial: "Meet Our Contributors gives you a monthly one-hour opportunity to ask questions about our upstream community, watch interviews with our contributors, and participate in peer code reviews."

- A primeira edição foi dia 7 de fevereiro. Eu participei!

* Consertando: código.

* A situação atual.

Sean:

"For example, there are so many different clients that can talk to the API server. There’s dynamic client, there’s OpenAPI schema, there’s client-go which has the hardcoded types, there’s the REST client. There’s no reason for how things are done and there’s certainly not any documentation at a high level of what goes where.

The interaction between components of each of them is a mystery. Projects grow and grow and you just tack stuff onto it ’til it’s a huge difficult mess.

There are very few people who understands the whole scope of the client to the API server, no one besides Phil, I think.

Even people who work on this as their day job only know parts of it; the complexity is substantial. Even for small parts it’s a daunting system, and anyone who has made even small PRs is already in the top percentile of the people who understand this.

Right now there’s this massive monolith, and the path Phil is trying to take us towards is breaking this monolith into smaller tools."

* A situação atual.

Phillip Wittrock, SIG-CLI lead, Google:

"The theory is that the biggest challenge for developers is incidental complexity.

Ideally you’d develop self contained bits where you only need to understand how to use the library, not how it works. So if you have a system that’s three libraries, each with a focussed purpose and a well defined interface, and then a program that invokes those libraries, a developer can approach the system learning only about the program they’re modifying, which is 1/4 of the system.

If instead the program implements all the stuff in the libraries, the developer needs to understand the interactions of the full system, and separate out the bits that impact them versus the bits that don’t. And interactions between components are N to N, so you get an explosion of complexity (combinatorics).

So if you want to build a system approachable by new developers you need to keep it simple and focussed. As you expand the system to do more things, you need to logically separate the parts into different packages and subcomponents with clear interfaces."

* A situação atual.

Perguntei sobre que características tornam um projeto acessível para novos contribuidores:

"I don’t think they’re approached quite like 'we need to make it easy for new developers to join this project,' but more like, 'the code needs to be clean and well structured.' Which is really 80% of making it easy for new developers to join."

* O futuro ideal.

"Pieces consumed by groups other than the authoring group must be simple, well documented and developed independently from the components that consume them. This can be achieved through:

– Minimizing cross group dependencies — enabling groups to own their development end to end (proposal, development, testing, publish release artifact, documentation)

– Ensuring that necessary cross group dependencies are simple, well understood and well documented

– As Kubernetes contributor, I should be able to understand how to use the public libraries / tools published by groups I am not a member of without learning how they are implemented or reading their source code.

– As a Kubernetes contributor, I should be able to understand how to use the public libraries / tools published by groups I am not a member without soliciting the attention of a member of those groups."

* Você.

* Quer contribuir, mas tem dificuldades?

- Peça ajuda. Peça claramente. As pessoas são ocupadas, elas não sabem do que você precisa. Se você pedir, já é meio caminho andado. Em geral, as pessoas gostam de ajudar.

- Tenha em mente que ajudar é difícil. Muitas vezes a vontade existe, mas não se sabe como. Se você precisa que ajudem de um jeito diferente do que estão oferecendo, peça. As pessoas gostam de ajudar.

- E saiba que contribuir para um projeto desses é difícil. Não é culpa sua, não é questão do seu nível de habilidade. É difícil pra todo mundo. Tenha paciência.

* Tem experiência, mas não sabe como ajudar?

Dá uma olhada nas disciplinas que por trás de developer advocacy, developer evangelism, ou developer relations.

Não precisa dar palestras. Foque na arte de conectar ferramentas com developers. Se você quer não somente escrever código, mas conectar pessoas, vai curtir.

* Minha experiência, parte 3.

* No fim dessa história toda...

- Recebi ajuda.

- Acabei pegando o jeito.

- Fiz contribuições, e agora tem um library lá com meu nome embaixo.

* Qual o sentimento predominante ao final do internship? 

Que desafio nenhum é grande demais.

Kubernetes for life.

* Por fim...

* Links

Onboarding series
Talk Montanhas
1o Meet contributors https://www.youtube.com/watch?v=iqtZKQ2j-LM
https://medium.com/@ashleymcnamara/what-is-developer-advocacy-3a92442b627c

And here’s what the new contributor guide looks like now. https://github.com/kubernetes/community/tree/master/contributors/guide

* Agradecimentos

- Paris Pittman, Phillip Wittrock, and Sean Sullivan for taking their time to talk to me about this subject; 
- Nikhita Raghunath for her feedback and suggestions; 
- Antoine Pelisse for being an amazing mentor and having more patience than any intern could ever hope for.